var store = [{
        "title": "List of Journals for Structural Engineers",
        "excerpt":"Following are some highly revered peer-reviewed journals for structural engineering researchers (Note - Journals are arranged in random order, it does not signify any hierarchy). If any journal is missing from the list, please suggest the name of the journal (site link if possible) in the comments section… SCI/SCIE   Journal of Structural Engineering, ASCE  Journal of Bridge Engineering, ASCE  Journal of Computing in Civil Engineering, ASCE  Engineering Structures, Elsevier  Materials and Structures, Springer  Engineering Computations, Emerald  Structural Engieerning and Mechanics, Technopress  Earthquakes and Structures, Technopress  Computers and Concrete, Technopress  ACI Structural Journal, ACI  Structures, Elsevier  Journal of Structural Concrete  Advances in Structural Engineering  Magazine of Concrete Research  Reliability Engineering &amp; System Safety  Structures and Buildings, ICE  Archives of Civil and Mechanical Enigneering, Elsevier  Int. Journal of Concrete Structures and Materials, Springer  Structure and Infrastructure Engineering, T&amp;F  Journal of Earthquake Engineering, T&amp;F  Bulletin of Earthquake Engineering, Springer  Frontiers of Structural and Civil Engineering, Springer  Journal of Structural Stability and dynamics, WorldScientific  Advances in Engineering Software, Elsevier  Sadhana, Springer  Simulation Modelling Practice and Theory, Elsevier  Archives of Computational Methods in Engineering, SpringerScopus/ESCI   International journal of structural engineering, Inder Science  Journal of Structural Engineering, SERC Chennai  Asian Journal of Civil Engineering  HKIE Transactions","categories": ["Research","Journals"],
        "tags": ["Research","Jorunals"],
        "url": "https://vijaypolimeru.github.io/research/journals/2020/01/30/list-of-journals.html"
      },{
        "title": "Awesome List of Text Books for Structural Engineers",
        "excerpt":"Following are some of the awesome text books for learning various concepts of structural engineering (from very basic to advanced). (Note - Text books are arranged in random order, it does not signify any hierarchy). If any text book is missing from the list, please suggest the name of the book and author (any web-site link if possible) in the comments section… Design of Multi-storey buildings   Illustrated Design of Reinforced Concrete Buildings (Design of G+3 Storeyed Buildings + Earthquake Analysis &amp; Design) - Dr. S. R. Karve and Dr. V. L. Shah          Do not afraid - Preferable for UG, PG and Practicing engineers        Structural Design of Multi Storeyed Building - U. H. Varyani          Do not afraid - Preferable for UG, PG and Practicing engineers      Engineering Mechanics - Statics and Dynamics   Engineering Mechanics - Statics and Dynamics, - RC Hibbeler          Do not afraid - Fundamentals are clearly explained      Preferable for both UG and PG        Vector Mechanics for Engineers: Statics and Dynamics - Beer and Johnston          Do not afraid - Fundamentals are clearly explained      Preferable for both UG and PG      Mechanics of Materials and Strength of Materials   Mechanics of Materials (SI Units) - R C Hibbeler          Do not afraid - Fundamentals are clearly explained      Preferable for both UG and PG        Mechanics of Materials (SI Units) - Beer and Johnston          Do not afraid - Fundamentals are clearly explained      Preferable for both UG and PG        Mechanics of Materials 8th Edition - Gere and Goodno          Do not afraid - Fundamentals are clearly explained      Preferable for both UG and PG        Strength of Materials - (Part - 1) - Stephen Timoshenko          Be careful - Preferable for only PG      Theory of elasticity and Plasticity   Strength of Materials : Advanced Theory and Problems (Part - 2) - Stephen Timoshenko          Be careful - Preferable for only PG        Computational Elasticity - Mohammed Ameen          Do not afraid - Preferable for only PG        Advanced Mechanics of Materials - A. P. Boresi          Do not afraid - Preferable for only PG      Structural Analysis   Structural Analysis - Prof. Devdas Menon          Do not afraid - Fundamentals are clearly explained      Preferable for both UG and PG        Advanced Structural Analysis - Prof. Devdas Menon          Do not afraid - Preferable for only PG        Structural Analysis - R C Hibbeler          Do not afraid - Fundamentals are clearly explained      Preferable for both UG and PG        Structural Analysis - Vol. 1 - S. S. Bhavikatti          Do not afraid - Fundamentals are clearly explained      Preferable for both UG and PG        Structural Analysis - Vol. 2 - S. S. Bhavikatti          Do not afraid - Fundamentals are clearly explained      Preferable for both UG and PG      Pre-stressed Concrete   Prestessed Concrete - Prof. N. Krishna Raju          Do not afraid - Fundamentals are clearly explained      Preferable for both UG and PG        Prestressed Concrete Design, - Prof. Praveen Nagarajan          Do not afraid - Fundamentals are clearly explained      Preferable for both UG and PG        Prestressed Concrete Structures - Prof. Collins and Prof. Mitchell          Be careful - Preferable for only PG      Reinforced Concrete Design   Reinforced Concrete Design - Prof. Menon and S. Pillai          Do not afraid - Fundamentals are clearly explained      Preferable for both UG and PG        Reinforced Concrete Design - Prof. N. Krishna Raju          Do not afraid - Fundamentals are clearly explained      Preferable for both UG and PG        Unified Theory of concrete Structures - Prof. T. T. C. Hsu and Prof. Y. L. mo          Be careful - Preferable for only PG      Steel Design   Design of steel structures (Limit State) - S. S. Bhavikatti          Do not afraid - Fundamentals are clearly explained      Preferable for both UG and PG        Design of steel structures (Limit State) - Prof. Subramaniam          Do not afraid - Fundamentals are clearly explained      Preferable for both UG and PG        Design of steel structures - Prof. S. Duggal          Do not afraid - Fundamentals are clearly explained      Preferable for both UG and PG      Finite Element Analysis   Finite Element Method with Applications in Engineering - Y M Desai, T. L. Eldho and A. H. Shah          Do not afraid - Fundamentals are clearly explained      Preferable for both UG and PG        Finite Element Method in Engineering - S. S. Rao          Do not afraid - Fundamentals are clearly explained      Preferable for both UG and PG        Finite Element Analysis - Prof. P. Seshu          Do not afraid - Fundamentals are clearly explained      Preferable for both UG and PG      Structural Dynamics   Dynamics of Structures - Prof. A. K. Chopra          Do not afraid - Preferable for only PG        Mechanical Vibrations - S. S. Rao          Do not afraid - Preferable for only PG      List is not exhaustive.Please don’t hesitate to comment your question or suggestions ","categories": ["Research","Text Books","UG","PG"],
        "tags": ["Research","Text Books"],
        "url": "https://vijaypolimeru.github.io/research/text%20books/ug/pg/2020/02/01/structural-engineering-text-books.html"
      },{
        "title": "Simple way to plot, interactively brush some data and automatically re-plot or to save the brushed/unbrushed data in a variable in Matlab",
        "excerpt":"Brushing or removing some noisy signal is often very much essential in signal processing, to uncover some valuable information from the total signal received. However, this brushing is often not an easy process when we have too many signals plotted in a single figure window. To easily identify and remove the noisysignal from each plot and to save the indices of removed signal requires good software tools. Matlab offers some easy to tools such as uicontrol, assignin etc to interactively brush the data and get the indices of brushed data, using which we can re-plot thetotal signal without noisy signal. Here in this post, we will plot three randomly generated signals, interactivley brush some signal and re-plot the brushed signal also save the indicesof brushed signal. The base code published here for single singal has been taken and improved further to make it work for multiple signal function testbrushcode()% Create signalt = randn(1, 100);x = sin(t);y = tan(2.*t);z = cos(2*t);% Create figure with points (Ref. Figure. 1)fig = figure();m{1} = scatter(t, x);hold onm{2} = scatter(t, y);m{3} = scatter(t, z);hold offbrush on;uicontrol('Parent', fig, ...    'Style', 'pushbutton',...    'String', 'Get selected points index',...    'Position', [5, 5, 200, 30],...    'Units', 'pixels',...    'Callback', {@mycallback, m} ...    );% 1. (Ref. Figure. 2)% 2. Select the data which you are intersted in or Brush the unwanted signal %    and slect the remaining signal in the figure window% 3. Then press the \"selectedPoints\" button and close the figure window waitfor(fig)% Once the figure window is closed, we are saving the selected data points% to each each in index_vec, which will used to re-plot the brushed data in% futureindex_vec{1} = find(selectedPoints1 == 1);index_vec{2} = find(selectedPoints2 == 1);index_vec{3} = find(selectedPoints3 == 1);save('index_vec.mat','index_vec')% Ref. Figure. 3fig = figure();scatter(t(index_vec{1}), x(index_vec{1}));hold onscatter(t(index_vec{2}), y(index_vec{2}));scatter(t(index_vec{3}), z(index_vec{3}));hold offendfunction mycallback(~, ~, mylineseries)% assingin function assigns the indices of selectedpoints to a variable% called selectedPoints1 or 2 or 3 in the caller workspace, which is% workspace of the function from which this function is calledassignin('caller', 'selectedPoints1', get(mylineseries{1},'BrushData'))assignin('caller', 'selectedPoints2', get(mylineseries{2},'BrushData'))assignin('caller', 'selectedPoints3', get(mylineseries{3},'BrushData'))endFigure.1 Figure.2 Figure.3 ","categories": ["Research","Matlab","Programming","useful codes"],
        "tags": ["Research","Matlab","Brush tool","assignin function","save data to a variable","plot"],
        "url": "https://vijaypolimeru.github.io/research/matlab/programming/useful%20codes/2020/02/02/brushed-data-matlab.html"
      },{
        "title": "Simply Simplest way to compile OpenSees in Ubuntu",
        "excerpt":"I have compiled OpenSees source code version 3.0.0 (github-link) on UBUNTU 18.04.2 LTS operating system using the procedure, provided by Mr. Farbood Panahi. Following are the detailed step-by-step instructions I followed for compiling this source code,   Dependency Check - Type the following commands in terminal to check whether the following prerequsites are installed, if not installed the command will automatically execute installing the softwares          sudo apt-get install make      sudo apt-get install tcl8.6      sudo apt-get install tcl8.6-dev      sudo apt-get install gcc      sudo apt-get install g++      sudo apt-get install gfortran      sudo apt-get install python3-dev        Download the latest release version of the source code from the link. In this post, I have compiled the release version 3.0.0 . (.zip or .tar.gz any one is fine.)  Create two folders with names bin and lib in the Home directory. This Home is not necessarily the UBUNTU home directory, you can set any directory as Home directory for OPS. However, you have to specify the path for this Home directory in line-91 of make file, which will be discussed in Step. 6.2.  Extract the downloaded OPS .zip or .tar.gz in the Home direcotry discussed in Step. 3 and rename it to OpenSees (O and S are capital letter - directory name is case-sensitive).  Goto MAKES folder inside the OpenSees directory and open the file Makefile.def.EC2-UBUNTU.  Change the following lines and save the file,          Line-90 - ./usr/local to /usr/local (i.e. just remove the dot)      Line-91 - ./home to /home/vijay (i.e. just remove the dot and add your computer login-name, all small letters), if you are compiling in the Ubuntu Home. (or) /home/vijay/Desktop/OPS_Compile (example path for HOME = If you have created the folder elsewhere). Check - In this folder there will be three sub-folders bin, lib and OpenSees        Open the Terminal from the OpenSees folder and type the command cp ./MAKES/Makefile.def.EC2-UBUNTU ./Makefile.def and then type the command make. Wait untill the compilation is over (it took roughly about 15-20 minutes in my computer).  After the compilation finished, go to the bin folder (i.e. created in step 3). You will find a file named OpenSees.  Open the Terminal in bin and type OpenSees, thats all OPS will load and you can input any tcl file to it. Also you can copy this OpenSees file to whatever the directory you want.An example showing, running the Truss.tcl(link) is as follows, (Just Hit the Enter, you will get the response of truss)  ","categories": ["Research","OpenSees","Programming","Ubuntu"],
        "tags": ["Research","opensees","compilation","executable"],
        "url": "https://vijaypolimeru.github.io/research/opensees/programming/ubuntu/2020/02/02/compile-opensees-ubuntu.html"
      },{
        "title": "Simply Simplest tool to overcome non-convergence issues in OpenSees",
        "excerpt":"Convergence issues are pretty common in any nonlinear finite element program, OpenSees, however is also not immune to these. In case of a convergence error, opensees throws a strange error message like this WARNING: CTest*::test() - failed to convergeafter * iterations current EnergyIncr: * Norm deltaX: *, Norm deltaR: **::solveCurrentStep() - The ConvergenceTest object failed in test()StaticAnalysis::analyze() - the Algorithm failed at iteration: * with domain at load factor *OpenSees &gt; analyze failed, returned: -3 error flagIt is just telling that ConvergenceTest object failed in test() and does not give any information about the source of error. Then, How to resove this?? In general, convergence issues occur primariliy due to inappropriate step size (too large or too small), stringent tolerances, algorithms, convergence test criteria. These are some of the possible sources of convergence issues. In special cases (such as inappropriately defined material models, elements and FE Mesh) Its very difficult to zero-in the source of error by optimising the step sizes, tolerances, algorithms etc. In such special cases it is very essential to correct the material models or elements before updating step-sizes, tolerances, algorithms etc. In this post we will discuss about some tools to resolve the convergence issues in general cases. The idea behind these tools is simply adaptively trying varying step-size, tolerances, algorithms. The simplest example of such adaptive tool for performing static pushover analysis can be found in the opensees examples (link), #  ---------------------------------    perform Static Pushover Analysisset Nsteps [expr int($Dmax/$Dincr)];        # number of pushover analysis stepsset ok [analyze $Nsteps];                # this will return zero if no convergence problems were encounteredif {$ok != 0} {      \t# if analysis fails, we try some other stuff, performance is slower inside this loop\tset ok 0;\tset controlDisp 0.0;\tset D0 0.0;\t\t# analysis starts from zero\tset Dstep [expr ($controlDisp-$D0)/($Dmax-$D0)]\twhile {$Dstep &lt; 1.0 &amp;&amp; $ok == 0} {\t\t\tset controlDisp [nodeDisp $IDctrlNode $IDctrlDOF ]\t\tset Dstep [expr ($controlDisp-$D0)/($Dmax-$D0)]\t\tset ok [analyze 1 ]\t\tif {$ok != 0} {\t\t\tputs \"Trying Newton with Initial Tangent ..\"\t\t\ttest NormDispIncr   $Tol 2000  0\t\t\talgorithm Newton -initial\t\t\tset ok [analyze 1 ]\t\t\ttest $TestType $Tol $maxNumIter  0\t\t\talgorithm $algorithmType\t\t}\t\tif {$ok != 0} {\t\t\tputs \"Trying Broyden ..\"\t\t\talgorithm Broyden 8\t\t\tset ok [analyze 1 ]\t\t\talgorithm $algorithmType\t\t}\t\tif {$ok != 0} {\t\t\tputs \"Trying NewtonWithLineSearch ..\"\t\t\talgorithm NewtonLineSearch .8\t\t\tset ok [analyze 1 ]\t\t\talgorithm $algorithmType\t\t}\t\t\t\t};\t# end while loop};      # end if ok !0Similar algorithms can be found in the opensees examples database for static cyclic and transient analysis aswell. OpenSees consists of many algorithms (8 algortihms namely Linear, Newton, ModifiedNewton, Newton with line search, KrylovNewton, SecantNewton, BFGS and Broyden are primarily used) and each algorithm has various options. On top of that each algorithm can be coupled with variety of convergence test objects available in opensees, various combinatons of step-sizes etc. This humongous task can be easily perfomed with the help of a simple open-source tool called SmartAnalyze.tcl developed by Hanlin Dong.In this tool all the available algorithms in opensees are pre-defined with various combinations of alogrithm options, convergence tests and tolerances.This tool has a simple interface to connect the nonlinear finite element model with SmartAnalyze.tcl and there by perform static, quasi-static and transient anlyses. A simple example of transient analysis using SmartAnalyze.tcl is as follows source SmartAnalyze.tcldict set control testTol 1.0e-2; # Change test tolerancedict set control tryAlterAlgoTypes True; # Try to change algorithm (default: False)dict set control algoTypes {40 20}; # Config the algorithms to run by a list of tags (refer to the comments in the code)dict set control tryForceConverge True; # force the model to converge.while {$controlTime &lt; $TmaxAnalysis &amp;&amp; $ok == 0} { \tSmartAnalyzeTransient $DtAnalysis 1 control\t#set ok [analyze 1 $DtAnalysis];\t\t\t# actually perform analysis; returns ok=0 if analysis was successful\tset controlTime [getTime]\tputs \"Current Time In the Domain = $controlTime ---------------------------------------------------------------\";}Readers can download version 2.2 of the tool, from here. However, more information and latest updates on the toolcan be found here. ","categories": ["Research","OpenSees","Programming","convergence"],
        "tags": ["Research","opensees","convergence","script"],
        "url": "https://vijaypolimeru.github.io/research/opensees/programming/convergence/2020/02/02/smart-analyse.html"
      },{
        "title": "Four Simple tools to draw beautiful plots in C++",
        "excerpt":"For people who are migrating from Matlab or Python (or some other well-developed scientific programming tools) to C++ (A primitive programming language),plotting is a little bit tricky job, as there is no default plotting library available in any C++ IDE (not even in Visual Studio 2019). Its very strage but true, I still don’t understand, why data visualistaion is not in the bucket list of C++ developers. However, there are many libraries (or third party tools) available online for making plotting possible in C++. Many of them are open source Following are some of the powerfull open source tools (except MATLAB), which I have tested,       Koolplot a simple, elegant and easy to use tool for 2D plotting and may not be enough for your requirement. An example excerpt taken from the website is shown below, you can find more examples and the process of linking it with C++ IDE here.     #include \"koolplot.h\"int main(){   plotdata x(-6.0, 6.0);       plotdata y = sin(x) + x/5;   plot(x, y);   return 0;}            GNUPlot, is a very robust opensource tool for plotting, with the help of an interface called Gnuplot-iostream interface, calling the gnuplot commands from C++ is very easy process. If somebody is already experienced plotting in gnuplot and have to use C++ for their programming then this interface is very usefull. or if you want to create your own interface, this the information provided in here will be very useful. The process of linking this interface is veryeasy, just install gnuplot in your system and then link the include directory and lib directory of gnuplot to C++ IDE, and then you are ready to go. Examples on how to use Gnuplot from C++ using gnuplot-iostream interface are given here, an excerpt of sample example is posted below.      #include &lt;vector&gt; #include &lt;cmath&gt; #include &lt;boost/tuple/tuple.hpp&gt; #include \"gnuplot-iostream.h\" int main() {     Gnuplot gp;     std::vector&lt;boost::tuple&lt;double, double, double, double&gt; &gt; pts_A;     std::vector&lt;double&gt; pts_B_x;     std::vector&lt;double&gt; pts_B_y;     std::vector&lt;double&gt; pts_B_dx;     std::vector&lt;double&gt; pts_B_dy;     for(double alpha=0; alpha&lt;1; alpha+=1.0/24.0) {         double theta = alpha*2.0*3.14159;         pts_A.push_back(boost::make_tuple(              cos(theta),              sin(theta),             -cos(theta)*0.1,             -sin(theta)*0.1         ));         pts_B_x .push_back( cos(theta)*0.8);         pts_B_y .push_back( sin(theta)*0.8);         pts_B_dx.push_back( sin(theta)*0.1);         pts_B_dy.push_back(-cos(theta)*0.1);     }     gp &lt;&lt; \"set xrange [-2:2]\\nset yrange [-2:2]\\n\";     gp &lt;&lt; \"plot '-' with vectors title 'pts_A', '-' with vectors title 'pts_B'\\n\";     gp.send1d(pts_A);     gp.send1d(boost::make_tuple(pts_B_x, pts_B_y, pts_B_dx, pts_B_dy)); } // very simple tool right???        MATLAB (Yes, I am not kidding MATLAB can be called from C++) If you are familiar with MATLAB, you can get the same functionality in C++ by calling, functions/toolboxes from MATLAB and vice versa. Since MATLAB is commercial software, first you have to acquire license (this is very costly). If you have an installed MATLAB software, then use the engine.h file and link the necessary MATLAB library files to C++ IDE, then the process is outright simple. A detailed step-by-step process of linking matlab to visual studio c++ is provided here and here. An example code is given here, an excerpt of an example is given below     #include &lt;stdlib.h&gt; #include &lt;stdio.h&gt; #include &lt;string.h&gt; #include \"engine.h\" #define  BUFSIZE 256 int main() {     Engine *ep;     mxArray *T = NULL, *result = NULL;     char buffer[BUFSIZE+1];     double time[10] = { 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0 };     if (!(ep = engOpen(\"\"))) {         fprintf(stderr, \"\\nCan't start MATLAB engine\\n\");         return EXIT_FAILURE;     }     T = mxCreateDoubleMatrix(1, 10, mxREAL);     memcpy((void *)mxGetPr(T), (void *)time, sizeof(time));     engPutVariable(ep, \"T\", T);     engEvalString(ep, \"D = .5.*(-9.8).*T.^2;\");     engEvalString(ep, \"plot(T,D);\");     engEvalString(ep, \"title('Position vs. Time for a falling object');\");     engEvalString(ep, \"xlabel('Time (seconds)');\");     engEvalString(ep, \"ylabel('Position (meters)');\");     printf(\"Hit return to continue\\n\\n\");     fgetc(stdin);     printf(\"Done for Part I.\\n\");     mxDestroyArray(T);     engEvalString(ep, \"close;\");     buffer[BUFSIZE] = '\\0';     engOutputBuffer(ep, buffer, BUFSIZE);     while (result == NULL) {         char str[BUFSIZE+1];         printf(\"Enter a MATLAB command to evaluate.  This command should\\n\");         printf(\"create a variable X.  This program will then determine\\n\");         printf(\"what kind of variable you created.\\n\");         printf(\"For example: X = 1:5\\n\");         printf(\"&gt;&gt; \");         fgets(str, BUFSIZE, stdin);         engEvalString(ep, str);         printf(\"%s\", buffer);         printf(\"\\nRetrieving X...\\n\");         if ((result = engGetVariable(ep,\"X\")) == NULL)           printf(\"Oops! You didn't create a variable X.\\n\\n\");         else {         printf(\"X is class %s\\t\\n\", mxGetClassName(result));         }     }     printf(\"Done!\\n\");     mxDestroyArray(result);     engClose(ep);\t\t     return EXIT_SUCCESS; }            Python, for people who are familiar with matplotlib tool in Python, there is a very elegant interface available to call matplotlib of python from C++. a simple example may look like this (source) and the matlabplotcpp.h is available here.      #include \"matplotlibcpp.h\" namespace plt = matplotlibcpp; int main() {     plt::plot({1,3,2,4});     plt::show(); }      Hope this information may be useful… Note - If any information is not cited appropriately or any links are not working, please comment I will update with appropriate ones… ","categories": ["Research","plotting","Programming","Graphics","OpenSees","Visual Studio"],
        "tags": ["koolplot","python","Matlab","GNUPlot"],
        "url": "https://vijaypolimeru.github.io/research/plotting/programming/graphics/opensees/visual%20studio/2020/02/05/plotting-in-cpp.html"
      },{
        "title": "Arrays - Tcl Master Series",
        "excerpt":"This post in the Tcl Master Series is dedicated to discuss various types of arrays and their operations in Tcl. Tcl supports two types of arrays,   Associative Array - In which a group of elements (numbers or strings) are systematically arranged using Indices which are not necessarily a number.  Conventional Array - In which a group of elements (numbers) are systematically arranged using Indices. In Tcl every array is associative.However, by using only positve integer indices, we can make an associative array behave like a conventional array.Associative Arrays   The syntax for a creating Associative array is set ArrayName(Index_ID) Value (Value - can be a number or string, Index_ID - can also be a number or string).  The syntax for a calling conventional array is $ArrayName(Index_ID), if you know the Index_ID then you can use it directly to get value in that index,else first you must know all the Index_IDs. To know the index_ids use set Index_ID_List [array names ArrayName]; this sets all the index_ids in a list named Index_ID_List (you can use any name here) in a random order.  The syntax for finding the Array Size is set Size_Variable_Name [array size ArrayName]- It is a type of expression whose output is an integer and must be stored in a variable.Examples on Associative arrays       Basic Operations      set Ass_Array(Age) 1; set Ass_Array(Height) 1.5; set Ass_Array(1) [expr 2.0/3.0]; # Index ID can also be a number set Ass_Array(3.5) [expr 10/5]; # Index ID can also be a floating point number set Ass_Array(Name) My_Name; # No Spaces set Ass_Array(Full_Name) \"My Full Name\";  puts \"$Ass_Array(Full_Name)\" set Size_Ass_Array [array size Ass_Array]; # it returns 5 set A [array names Ass_Array]; # or simply use puts [array names Ass_Array]; to print the index_ids            Array Iteration      foreach index_ids [array names Ass_Array] {    puts \"Ass_Array($index_ids): $Ass_Array($index_ids)\" }      Conventional Arrays As said before, Tcl doesnot know the difference between associative and conventional arrays, by using +ve integer indices we are making an associative arraybehave like a one dimensional and multi dimensional conventional arrays. One Dimensional Arrays (aka Vectors) Syntaxes   The syntax for a creating conventional array is set ArrayName(Index) Value (Value - can be a number or string, Index - Is a +Ve Integer starting from 0).  The syntax for a calling conventional array is $ArrayName(Index_Value) (you must know the index value). If index value is stored in another varaible then $ArrayName($Index_Value).  The syntax for finding the Array Size is set Size_Variable_Name [array size ArrayName]- It is a type of expression whose output is an integer and must be stored in a variable.Examples   Basic Operations     set Num_Array(0) 1; set Num_Array(1) 1.5; set Num_Array(2) [expr 2.0/3.0]; set Num_Array(3) Vijay; # No Spaces set Num_Array(4) \"Vijay Kumar\"; # With Spaces, double quotes are necessary otherwise it is an error (wrong # args: should be \"set varName ?newValue?\") set Size_Num_Array [array size Num_Array]; # it returns 5 puts \"Num_Array(0) = $Num_Array(0) \\n\"; puts \"Num_Array(1) = $Num_Array(1) \\n\"; puts \"Num_Array(2) = $Num_Array(2) \\n\"; puts \"Num_Array(3) = $Num_Array(3) \\n\"; puts \"Num_Array(4) = $Num_Array(4) \\n\"; puts \"Size_Num_Array = $Size_Num_Array \\n\"; # $Size_Num_Array(0) is an error (can't read \"Size_Num_Array(0)\": variable isn't array)        or      set Index_Value 0; puts \"Num_Array($Index_Value) = $Num_Array($Index_Value) \\n\";            Array Iteration     If you use indices starting from 0,1,2,3....n then you can query them using a any looping technique (for, foreach, while etc.), else if you use non-continuous numbers 10,4, 5, 5.5....n then the querying process is similar to associative arrays.      for { set Index_Value 0 }  { $Index_Value &lt; [array size Num_Array] }  { incr Index_Value } {     puts \"Num_Array($Index_Value) = $Num_Array($Index_Value) \\n\"; }      Multi Dimensional Arrays (aka Matrices) Syntaxes   The syntax for a creating conventional multi dimensional array is set ArrayName(Index_i,Index_j) Value (Value - can be a number or string, Index_i and Index_j          are +Ve Integers starting from 0). Note-,              set ArrayName(Index_i,Index_j) Value is correct      set ArrayName(Index_i, Index_j) Value is error, becuase space is not allowed in index.        The syntax for a calling multi dimensional array is $ArrayName(Index_i,Index_j) (you must know the index values). If index value is stored in another varaible then $Array_i_Name($Index_Value_i),$Array_j_Name($Index_Value_j).  The syntax for finding the Array Size is set Size_Variable_Name [array size ArrayName]- It is a type of expression whose output is an integer and must be stored in a variable. You will only get the total number of elementsin the matrix, getting a number of columns and number of rows saperately is not possible.Examples   Basic Operations     set nd_Array(0,0) 1; set nd_Array(0,1) 1.5; set nd_Array(0,2) [expr 2.0/3.0]; set nd_Array(1,0) Vijay; # No Spaces set nd_Array(1,1) \"Vijay Kumar\"; # With Spaces, double quotes are necessary otherwise it is an error (wrong # args: should be \"set varName ?newValue?\") set nd_Array(1,2) [expr rand()];            Array Iteration     If you use indices starting from 0,1,2,3....n then you can query them using a any looping technique (for, foreach, while etc.), else if you use non-continuous numbers 10,4, 5, 5.5....n then the querying process is similar to associative arrays.      for { set i 0 }  { $i &lt; 2 }  { incr i } {     for { set j 0 }  { $j &lt; 3 }  { incr j } {         puts \"nd_Array($i,$j) = $nd_Array($i,$j) \\n\";     } }      A more general approach to create and perform operations on matrices (such as creation, addition, substraction, multiplication, determinant, inversion etc.)are presented using here using Standard Tcl Library (Tcllib) Note - Use for loop for conventional arrays and foreach loop for associative arrays, becuase it is easy to play with indices using for loop. More concepts on arrays will be added soon… Hope this information may be useful… Note - If any example is not working or any links are not working, please comment I will update with appropriate ones… ","categories": ["Tcl","Tcl Master Series"],
        "tags": ["Tcl","Arrays","Vijay Kumar Polimeru","Vijay Polimeru"],
        "url": "https://vijaypolimeru.github.io/arrays-learn-tcl-programming-from-scratch/"
      },{
        "title": "Lists - Tcl Master Series",
        "excerpt":"This post in the Tcl Master Series is dedicated to discuss various types of lists and their operations in Tcl. By default every variable in .tcl is a list. A list is similar to conventional array (only integers can be used to access the elements in the list).       First way      set i 0; set temp_list1 {$i [expr $i + 1] [expr $i+2]} set temp_list2 {$i [expr $i + 1] [expr $i+2] sample text} puts \"$temp_list1\" puts \"$temp_list2\"        if the elements are defined in between { } then they are treated as strings, when you compile the code you will get an output like this $i [expr $i + 1] [expr $i+2]         Second way      set i 0; set temp_list1 \"$i [expr $i + 1] [expr $i+2]\" set temp_list2 \"$i [expr $i + 1] [expr $i+2] sample_text\" puts \"$temp_list1\" puts \"$temp_list2\"        if the elements are defined in between \" \" then the expersssions defined in the list elements are evaluated, i.e. when you compile the code you will get an output like this 0 1 2. This can accept strings too   Accessing list elements   Using for loop     set i 0; set temp_list \"$i [expr $i + 1] [expr $i+2]\" for {set i 0} {$i &lt; [llength $temp_list]} {incr i} {     puts \"[lindex $temp_list2 $i]\" }          Note - [llength $temp_list] returns the length of the list   Appending elements to list   Using for loop     set list1 {} for {set i 0} {$i &lt; 5} {incr i} {     set temp_list \"$i [expr $i + 1] [expr $i+2]\"     lappend list1 $temp_list; # lappend is the key word to which the new list is appeneded }  puts \"$list1\"; # To print the whole list puts \"[lindex $list1 3]\"; # To print element of a list puts \"[lindex [lindex $list1 3] 2]\"; # To print the element in the element of a list        Note - [lappend old_list $new_list] is the key word to which the new list is appeneded   More concepts on arrays will be added soon… Hope this information may be useful… Note - If any example is not working or any links are not working, please comment I will update with appropriate ones… ","categories": ["Tcl","Tcl Master Series"],
        "tags": ["Tcl","Lists","Vijay Kumar Polimeru","Vijay Polimeru"],
        "url": "https://vijaypolimeru.github.io/lists-learn-tcl-programming-from-scratch/"
      },{
        "title": "Tcl Master Series - Learn Tcl Programming from Scratch",
        "excerpt":"To succesfully master nonlinear finite element programming in OpenSees, it is very essential to learn (or master) either Tcl or Python. Because, Tcl and Python arethe only mainstream interpreters available for modelling structres in OpenSees. In the current scenario, it is very easy to get a resource (books, video tutorials, blogs etc.) for learning Python, as it is dominating the world of computer programming. But this is not the case with Tcl, getting a good introductory resource for Tcl is a daunting task. Though there are some good resources for learning Tcl (such as Tcl/Tk course on Tutorials Point, Tcl and the Tk Toolkit book, and more (given a the end of this post)), there are no courses which introduce Tcl from the standpoint of matrix and vector operations (Linear Algebra in general) and standard Tcl library (Tcllib), which are veryessential for engineers, particulary finite element modellers in OpenSees. Hence to help upcoming finite element modellers in OpenSees, this Tcl Master Series has been started. Wherein we will provide all the essential concepts (from the standpoint of linear algebra and Tcllib with relevant examples) required to create elegant finite element models, which are easy to read and debug in Tcl for OpenSees. The list of topics which we will cover in this series are as follows,   Setting up essential tools (such as Tcl compiler, IDE)  Programming Concepts          Basic Information about Tcl Programming      if…elseif….else      Loops      Arrays      Lists      Dictionraies      Procedures      File Management      Exception Handling      Standard Tcl Library (Tcllib)                  Installation          Examples                      Various Useful Codes and ProcsLearning Resources Books   Tcl and the Tk Toolkit by John K. Ousterhout and Ken Jones  Practical Programming in Tcl and Tk by Brent B. Welch and Ken JonesWeb Courses   Tcl/Tk by TutorialsPoint  Standard Tcl Library (Tcllib) Documentation  Komodo IDE DocumentationThis is an Open-Source course primarily devoted to Tcl, none of the OpenSees commands will be discussed here.As of now this series is in development stage, please do watch frequently for latest updates or sign-up here, I will notify you when ever there is a major update. ","categories": ["Tcl","OpenSees","Programming","Master Series","Tcl Master Series","Outline"],
        "tags": ["Tcl","Introduction","Installation","OpenSees","Nonlinear Finite Element","Vijay Kumar Polimeru","Vijay Polimeru"],
        "url": "https://vijaypolimeru.github.io/Learn-Tcl-Programming-from-Scratch/"
      },{
        "title": "if..elseif..else... - Tcl Master Series",
        "excerpt":"This post in the Tcl Master Series is dedicated to discuss various types of conditional statements and their operations in Tcl. If…else if … else, syntax in Tcl language is       Syntax      if {boolean_expression 1} {    # Executes when the boolean expression 1 is true } elseif {boolean_expression 2} {    # Executes when the boolean expression 2 is true  } elseif {boolean_expression 3} {    # Executes when the boolean expression 3 is true  } else {    # executes when the none of the above condition is true  }        Example      set Time_Step 0.005; set  set ok [analyze 1 $Time_Step] if {$ok == 0} {      puts \"i = $i \\t Time_Step = $Time_Step -----------------------------\" } elseif {$ok &lt; 0} {     puts \"i = $i \\t OK value = $ok -----------------------------\" } else {     break; # It breaks a for loop }        If the Boolean expression evaluates to true, then the if block of code will be executed, otherwise the elseif block of code will be executed, otherwise the else block of code will be executed.         Multiple Conditions in If statement (Make sure the if condition starts with a  curly braces {})      if {($i == 0) || ($i == 4)} {     set node_num [expr $nodeStartID + $j];     set node_x [expr $deltaL*$j];     set node_y [expr $deltaH*$i];     lappend node_data \"$node_num $node_x $node_y\" }            List of Qualified Operators in Tcl (Note - use expr and $ while evaluating the following expressions)                   Arithmetic operators (set A 3 and set B 10)                                             Operator              What it does?              Example                                                          +              Adds two numbers              A + B will retun 13                                      -              Substract two numbers (second from first)              A - B will return -7                                      *              Multiplies two numbers              A*B will return 30                                      /              Divides Numberator by Denominator. (Note, to return a float value either one of A or B must be a float value)              A/B will return 0 and 3./10 will retrun 0.3                                      %              Returns the remainder after division of two integer numbers (For % to work A and B must be integers )              A % B will return 3                                                  Relational operators (set A 3 and set B 10)                                             Operator              What it does?              Example                                                          ==              Checks equality of two numbers              (A == B) will retun 0                                      !=              Checks inequality of two numbers              (A != B) will return 1                                      &gt; and &lt;              Checks if the (strictly) left value is less than the right value (similiarly for greater than)              (A &gt; B) will return 0 and (A &lt; B) will return 1                                      &gt;= and =&lt;              Checks if the left value is Less than or equal to the right value (similiarly for greater than)              (A &gt;= B) will return 0 and (A =&lt; B) will return 1                                                  Logical operators (set A 1 and set B 0)                                             Operator              What it does?              Example                                                          &amp;&amp;              AND operator              (A &amp;&amp; B) will retun 0                                      ||              OR operator              (A || B) will return 1                                      !              NOT operator              !(A &amp;&amp; B) will return 1                                          More concepts on arrays will be added soon… Hope this information may be useful… Note - If any example is not working or any links are not working, please comment I will update with appropriate ones… ","categories": ["Tcl","Tcl Master Series"],
        "tags": ["Tcl","if","elseif","else","Vijay Kumar Polimeru","Vijay Polimeru"],
        "url": "https://vijaypolimeru.github.io/conditionals-learn-tcl-programming-from-scratch/"
      },{
        "title": "Functions or Procedures - Tcl Master Series",
        "excerpt":"This post in the Tcl Master Series is dedicated to discuss about various operations on Procedures in Tcl. Creating functions (or procedures) Tcl Procedures are similar to the functions in other programming languages. They basically avoid repeating the same codeat multiple locations. Procedures are created using Proc command. A simple Procedure has the following syntax proc procedureName {arguments} {   body of code   return $var}  Example - 1, Definition of a simple proc to check puts command     proc CheckPutsCommand {} { ;# No Input Arguments    puts \"Hurray, Puts is working\"\t    } CheckPutsCommand        Upon exection, following output will be printed in the console (Note, proc name is case-sensitive, both calling and defining names should be same)      Hurray, Puts is working        Example - 2, Definition of a proc with Multiple but single valued arguments     proc AddNumbers { a b} { ;# Input Arguments    set sum [expr $a + $b]    return $sum;\t    } AddNumbers 10 30        Upon exection, following output will be printed in the console      40        Example - 3, Definition of a proc with Multiple Variable arguments (each argument is a vector)     proc CalculateMean { InputData } { ;# Input Arguments    set Sum 0;    foreach InputData_i $InputData {      set Sum [expr $Sum + $InputData_i]    }    set Mean [expr $Sum/[llength $InputData]]; # llength is inbuilt command, which returns the number of elements in the argument    return $Mean;  } set Mean_1 [expr [CalculateMean {10 30}] + [CalculateMean {10 30 40 50 60}]];  set Mean_2 [expr [CalculateMean {30 {[CalculateMean {10 30}]}}]]; # slightly difficult command *giving `proc` as an argument* puts \"Mean_1 = $Mean_1 \\t Mean_2 = $Mean_2\"        Upon exection, following output will be printed in the console (Note, Be careful while using braces, tcl is very bad at exception handling)      Mean_1 = 58      Mean_2 = 25        Example - 4, Definition of a proc with Default arguments     proc Multiply_a_and_b { a {b 10} } { ;# Input Arguments set Product [expr $a*$b]    return $Product;  } puts [Multiply_a_and_b 10 20] puts [Multiply_a_and_b 10]        Upon exection, following output will be printed in the console (Note, Be careful while using braces, tcl is very bad at exception handling)      200 100        NOTES -          While calling the funtion, if the function is located elsewhere you have to call the file also using source C:\\bladdh\\adfadsff\\filename.tcl before calling the function. (like we call the header files in c or c++ languages).      You can define any number of procs in a file.      More concepts on arrays will be added soon… Hope this information may be useful… Note - If any example is not working or any links are not working, please comment I will update with appropriate ones… ","categories": ["Tcl","Tcl Master Series"],
        "tags": ["Tcl","Procedures","Functions","Vijay Kumar Polimeru","Vijay Polimeru"],
        "url": "https://vijaypolimeru.github.io/procedures-learn-tcl-programming-from-scratch/"
      },{
        "title": "Loops - Tcl Master Series",
        "excerpt":"This post in the Tcl Master Series is dedicated to discuss various types of loops and their operations in Tcl. Though there exists several kinds of looping systems available in Tcl. Primarily, for, foreach and while are very popular in Tcl. Each of them can be defined in the following ways   for Loop     set N 100; for {set i 1} {$i &lt; $N} {incr i 1} {     puts \"The Value of i = $i\"; }        foreach Loop     set Variable_Vector \"1 2 3 4 5 6 7 8 9\"; foreach i $Variable_Vector {     puts \"The Value of i = $i\"; }  \t        while Loop     set i 0; set N 100; while {$i &lt; $N} {     puts \"The Value of i = $i\";     set i [expr ($i + 1)]; } \t        or      set i 0; set N 100; while {$i &lt; $N} {     puts \"The Value of i = $i\";     incr i; # incr is equivalent to (set i [expr ($i + 1)]) } \t      More concepts on arrays will be added soon… Hope this information may be useful… Note - If any example is not working or any links are not working, please comment I will update with appropriate ones… ","categories": ["Tcl","Tcl Master Series"],
        "tags": ["Tcl","Loops","For loop","While loop","Vijay Kumar Polimeru","Vijay Polimeru"],
        "url": "https://vijaypolimeru.github.io/loops-learn-tcl-programming-from-scratch/"
      },{
        "title": "Some Useful Practice Codes or Procedures - Tcl Master Series",
        "excerpt":"This post in the Tcl Master Series is dedicated to discuss about various useful codes in Tcl.     Table of Contents    File Management Operations  Miscellaneous…          Proc to Generate a Random Number between MinValue and MaxValue      File Management Operations   File with single vector of values     set filename \"Abc_123_Cde.out\"; # Keep this file in the folder or if it is elsewhere provide location (set filename \"C:\\badfba\\asdf\\Abc_123_Cde.out\";) set File_ID [open $filename r]; #Load the File (Abc_123_Cde.out) and read the values i set Variable_1 [read $File_ID] close $File_ID        Example, using the above varaible Variable_1 in a foreach loop      foreach counter $Variable_1 {     set Temp_Var $counter     puts \"Print the value of Temp_Var = $Temp_Var\" }        The use the vector Variable_1 like anyother vector in tcl     File with Multiple vectors of values     set filename \"Abc_123_Cde.out\"; # Keep this file in the folder or if it is elsewhere provide location (set filename \"C:\\badfba\\asdf\\Abc_123_Cde.out\";) set File_ID [open $filename r]; #Load the File (Abc_123_Cde.out) and read the values i  for {set i 1} {$i &lt; 100} {incr i 1} { # Say, 100 lines are there in the files with 5 Columns of equal Lengths     gets $File_ID line     scan $line \"%i %i %i %f %f\" Data_1($i) Data_2($i) Data_3($i) Data_4($i) Data_5($i) ; # Data_1,2,3,4 and 5 are vectors of equal length }        That’s it, we have loaded a file and stored its contents in different vectors. Now you can used the vectors like anyother vector in the program.      foreach i $Data_1 {     puts \"Data_1($i) \\t Data_2($i) \\t Data_3($i) \\t Data_4($i) \\t Data_5($i)\"\t }          Link, For more information on Tcl - File I/O,   Miscellaneous… Proc to Generate a Random Number between MinValue and MaxValue proc RandomValueGenerator { MinValue MaxValue} {    set RandValue [expr $MinValue + rand()*($MaxValue - $MinValue)];\treturn $RandValue;}puts [RandomValueGenerator -10 -10.5];puts [RandomValueGenerator  0.1 0.2];puts [RandomValueGenerator  10 -10.5];More concepts on arrays will be added soon… Hope this information may be useful… Note - If any example is not working or any links are not working, please comment I will update with appropriate ones… ","categories": ["Tcl","Tcl Master Series"],
        "tags": ["Tcl","Useful Codes","Vijay Kumar Polimeru","Vijay Polimeru"],
        "url": "https://vijaypolimeru.github.io/some-useful-codes-learn-tcl-programming-from-scratch/"
      },{
        "title": "Setting up IDE for Tcl Practice",
        "excerpt":"This post in the Tcl Master Series is dedicated to setup various online and offline IDE(s) for practicing Tcl. Komodo In this series we primarily use Komodo as our IDE for practice. Komodo is an opensource project (free) from Active-State, along with Tcl it supports several other languages. However,we use this for Tcl only in this course. The Latest version Komodo-v12.0.1 is throwing some strange bug in windows 7, which makesit unable to use. Hence will be using Komodo-v11 for this course, which can be downloaded from here. Installation of Komodo-v11 is straight forward, no complex steps involved in the process (list of steps provided below). However, you may need to register when you open the IDE for the first time, hence register yourself hereand keep your user-id and password in hand. Steps   Download and install latest version of Tcl from here, this may work as expected. However, in the present series we will be using Tcl. 8.5 (64 Bit) version, which you can download from here.  Double click on the ‘Komodo-IDE-11.1.1-91089.msi’ and follow the regular steps (next–&gt;next–&gt; etc). After succesful installation, first look will be like this. To test, whether the IDE is working properly or not. Create a file and paste the following code in it set a 1;set b 2;set c [expr $a + $b]puts \"Hello World, the sum of a and b is $c\"and the run button in the top menus, you will be prompted following pop-up, check the use default tclsh interpreter (for console applications) and press ok  you will see the following output in the output window.  Thats simple it is. If you face any difficulties while installation, first refer here for potential solution. If you did notfound any solution, please comment in the comment section, I will try to resolve the issue. Tcl Inbuilt executable tclsh.exe Tcl has an inbuilt compiler called tclsh.exe, it will be in C:\\yourpath\\Tcl\\bin folder. It also has another executable tclsh85.exe (since we installed Tcl8.5), you can use either one and just follow the steps to execute the code   Double click the tclsh.exe or tclsh85.exe.  Navigate to the inputfile.tcl  folder using cd commad  Just type tclsh inputfile.tcl and press enterKomodo uses the same executable to run the .tcl scripts. We can execute the same without Komodo IDE. However, Komodo provides additional featuressuch as variable type viewer, debugging using break points etc. Other Online Compilers - for quick reference Following are some online tools (I Prefer most) to compile and cross verify the .tcl code given below   Tutorials-Point IDE  RexTesterMore details (if require) will be added soon… Hope this information may be useful… Note - If any example is not working or any links are not working, please comment I will update with appropriate ones… ","categories": ["Tcl","Tcl Master Series"],
        "tags": ["Tcl","ide","komodo","Vijay Kumar Polimeru","Vijay Polimeru"],
        "url": "https://vijaypolimeru.github.io/ide-setup-tcl-programming-from-scratch/"
      },{
        "title": "A Simple Algorithm to Define Cyclic Constitutive Material Model - with example code",
        "excerpt":"Defining constitutive relationships () of the constituent materials is one of essential steps in the formulation of nonlinear finite element models. When the  relationship is linear such as , it is very easy, one line ofcode is enough. However, when the  relationship is nonlinear (like this - this is the simplest example)it is very difficult to define. The number of load paths (unloading and reloading) will define the complexity of the code. Any wrong definition of load path results in erroneous results or will show convergence issues. This process requires an easy to read and easy to debug algorithm. In this post, an attempt have been made to provide such an algorithm for steel01, which is shown in Figure. 1. Figure 1  (Note - For simplicity purposes, the influence of parameters  have been neglected and all the three load states involved in steel01, have been segregated into individual loadstates as shown in Figure. 2. However, creating suchindividual load states will ease the process of implementation of cyclic constitutive relationship in a computer program) The basic idea (as shown in Figure. 2) is that, if at any instant the previous strain (OStrain, i.e. strain at step (i-1)) is in a load state (LoadState) represented by solid black line in Figure. 2, the current strain (CStrain, i.e. strain at step i) lies in any one of the load states represented by dashed black line. Our objevtive is identify that current load state and calculating the stress by using the equations of that load state. Figure 2  This can be implemented in the program as follows, if (LoadState == 1)\tif (dStrain(i) &gt; 0) % Represents change in direction\t\tif (CStrain &lt; eps_y)\t\t\tLoadState = 1;\t\telse\t\t\tLoadState = 2;\t\tend\telse\t\tif (CStrain &gt; 0)\t\t\tLoadState = 1;\t\telse\t\t\tif (CStrain &gt; -eps_y)\t\t\t\tLoadState = 3;\t\t\telse\t\t\t\tLoadState = 4;\t\t\tend\t\tend\tendelseif (LoadState == 2).........end\tA sample Matlab code for the load states of steel01 as shown in Figure. 2for a random strain profile is provided here for further understanding, please download and comment your feedback and errors (if any).The equations involeved in every load path are available in the code. Hope this information may be useful… Note - If any example is not working or any links are not working, please comment I will update with appropriate ones… ","categories": ["Cyclic Constitutive Relationships"],
        "tags": ["Cyclic","Constitutive Relationships","Steel","Matlab","Vijay Kumar Polimeru","Vijay Polimeru"],
        "url": "https://vijaypolimeru.github.io/cyclic-constitutive-material-model/"
      },{
        "title": "Top 5 running and jogging tracks in IIT-Bombay",
        "excerpt":"  Running is the greatest metaphor for life, because you get out of it what you put into it   Oprah Winfrey  In this post, I have covered some of the best tracks for running/jogging at IIT Bombay. The distance of tracks ranges from, as short as 0.4 Km (3 mins approx) to 6.0 Km (30 min approx).Choose the path depending on your time goals. The total distance shown in the figures is measured using google maps, I guess slopes are excluded in GMaps, hence there might be  error (approximately). Track 1 I guess, this track does not need an introdcution. This is the running/jogging track in IITB-Gymkhana grounds.  Track 2 This route starts from Hostel 12/13/14 bus stop to Main gate (via Main road), without any major turns.  Track 3 This route starts from Hostel 12/13/14 bus stop to the tree before Padmavati temple, (via lake side road).  Track 4 This track is the road surrounding gymkhana grounds.  Track 5 This track is preferable for long distance running. This one startsat the T-Junction near campus hub –&gt; tree before padmavati temple (via lake side road) –&gt; Directors Bungalow –&gt; H10 –&gt; Main gate –&gt; YP gate –&gt; CSRE Building–&gt; QIP Quarters –&gt; Hostel 15 –&gt; Old SAC –&gt; and ends at T-Junction near campus hub  Hope this information may be useful… Note - If any example is not working or any links are not working, please comment I will update with appropriate ones… Last Updated: 2020-03-10 ","categories": ["Fitness","Running"],
        "tags": ["IIT Bombay","runing tracks","Vijay Kumar Polimeru","Vijay Polimeru"],
        "url": "https://vijaypolimeru.github.io/running-tracks-iit-bombay/"
      },{
        "title": "Start your first website using MkDocs",
        "excerpt":"No matter what profession you are in, having a website helps you in multiple ways. With the inception of static site generators (SSG),the process of building a website became very easy and free. In this post, I have provided step-by-step information to create your first website usinga python based SSG called MkDocs. Using MkDocs you can build awesome websites (or project documentations) in a matter of seconds and can host it on gh-pages for free. Along with MkDocs, there exists 460 other SSGs availble at your disposal. You can find adefnitive list of all available SSGs here. I the upcoming posts, I will try to cover as many as I can. With that said, Lets start installing prerequisites and build our first website using MkDocs. MkDocs installation involves three stpes   Installing Python  Installing pip and  Installing mkdocs and associated themes via pipOnce you finished these three steps, you are ready to go launch your first website. Installing Python To install Python download Anaconda Python or simply download Python. Installing pip To install pip on Linux or MacOS machines, please type pip install -U pip on Windows Machines please type python -m pip install -U pip in the command prompt. For more information, please refer to pip documentaion here Once you are done with steps 1 and 2, please check the version numbers of Python and pip to confirm that installation is succefull. On Linux/MacOS Machines $ python --versionPython 3.7.2$ pip --versionpip 19.3.1On Windows Machines &gt;python --versionPython 3.7.2&gt;python -m pip --versionpip 19.3.1Installing mkdocs and associated themes via pip To install mkdocs please enter the commands pip install mkdocs on Linux/MacOS Machines or python -m pip install mkdocs on Windows Machines. To confirm that installation is successfull, please type On Linux/MacOS Machines $ mkdocs --versionmkdocs, version 1.0.4On Windows Machines &gt;python -m mkdocs --version__main__.py, version 1.0.4 from C:Users\\blah\\blah\\Python\\Python37\\site-packages\\mkdocs (Python 3.7)Congragulations, installation is succesfull…, Now please follow the instructions to generate your first website and make it live using gh-pages Launching mkdocs website on gh-pages invloves three stpes   Creating a git repository  Creating mkdocs website in the local repository  Building and deploying the site to gh-pagesOnce you finished these three steps, your site is online. Creating a git repository mkdocs offers inbuilt support to deploy the website on gh-pages, provided by GitHub. Hence for that to happen you need to create a repository on GitHub and Pull it to your computer. To create a repository on GitHub, please follow the instructions posted here. If you are working on windows/mac, you can use GitHub Desktop application to create your repository from GitHub Desktop itself. On Linux machines using Kernel is the easiest way. Creating mkdocs website in the local repository Once git repository is created, type the command python -m mkdocs new [dir-name], this will create a folder with name as dir-name with in the folder you see a subfolder called docs and a file named mkdocs.yml. To see the live website while developing it type the commnad python -m mkdocs serve on command prompt and type the link which appears on command prompt, which probaly looks like this http://127.0.0.1:8000 copy it and paste it in your browser. You will see a site like this  Building and deploying the site to gh-pages Once the site is developed, type python -m mkdocs build follwed by python -m mkdocs gh-deploy. Your site will shortly appear on https://username.github.io/repository-name/ In the subsequent posts, we will discuss in detail about basic concepts like styling your pages, modifying yml file, adding plugins etc. and advanced cocepts like enhancing the theme, developing your own themes etc. Hope this information may be useful… Note - If any example is not working or any links are not working, please comment I will update with appropriate ones… Last Updated: 2020-03-09 ","categories": ["website","mkdocs","static site generators"],
        "tags": ["mkdocs","static site generator","python","Vijay Kumar Polimeru","Vijay Polimeru"],
        "url": "https://vijaypolimeru.github.io/start-your-first-website/"
      },{
        "title": "Introduction to Nonlinear Finite Element Analysis",
        "excerpt":"Finite Element Analysis (FEA) is one of the several methods avaibale to solve differential equations that describe many engineering problems. This method isformally introduced to the engineering students at under-graduate level to solve material and geometrically linear problems. An advanced version of this subject called Nonlinear Finite Element Analysis (NLFEA) is often introduced in the curriculum for post-graduate students. Most of the time it leftas a subject for self-study. For researchers who are working in the field of computational mechanics, a thorough understanding on this subject is veryessential. In this series of posts on Nonlinear Finite Element Analysis, I will try to cover different topics involved in NLFEA. As a starting point, I have taken the following outline of contents from the Lecture Notes written by Prof. Ioannis Koutromanos, because the contents are almost exhaustive and they will serveas a good signposts to learn NLFEA. However, the content provided in respective posts is purely my understanding on the subject and also depending on the topic, I will introduce new contents along with more examples and MATLAB/Python codes. Table of Contents   Nonlinear Finite Element Analysis–A Point of Departure          Revisiting the concept of linear elasticity      Introduction to Nonlinear material behavior      Interlude: Description of Elastic behavior – Generic Description of Elastoplastic Materials      Numerical Description of Nonlinear stress-strain laws – The discrete approach                  Example of a stress-strain law and of algorithmic implementation: Uniaxial elastic-hardening material with linear isotropic hardening          Kinematic Hardening                    Stress-Strain models in total form      Tangent slope of stress-strain diagram        Introduction to Nonlinear Analysis of Trusses and Beams          Nonlinear Analysis of Truss Structures      Nonlinear Analysis of Beam Structures      Generalized stress – generalized strain relation for Nonlinear Euler-Bernoulli beams based on uniaxial material laws – The layer (fiber) section model.      Solution of nonlinear equations – The iterative Approach                  Example 2.1: Iterative solution of scalar nonlinear equation          Example 2.2: Iterative solution of system of nonlinear equations                    Application of Iterative Solution Procedure to Nonlinear Structural Analysis                  Discussion-Convergence behavior of Newton-Raphson method          Tangent stiffness matrix for truss elements          Tangent stiffness matrix for beam elements (in the local coordinate system)                    Types of Newton-Raphson Iterative Methods      Incremental – Iterative Procedure for Nonlinear problems-Load control and displacement control – proportional loading.                  Example 2.3: Solution of nonlinear structure                    Interlude 1: Some necessary introduction – The BASIC system of a beam and the basic displacements/rotations.      Interlude 2: Force-based (flexibility-based) beam elements                  Weak form of Compatibility Equations – Principle of Virtual Forces          Force interpolation – Force-based elements          Nonlinear Force-Based Elements                    Accounting for Geometric Nonlinearities in Structural Analysis – The corotational formulation        Finite Elements for Small-Strain Inelastic Solid Mechancis          Introduction – Basic Definitions      Governing equations in solid mechanics – The conservation (balance) laws                  Conservation of mass for small-strain problems          Conservation of linear momentum for small-strain problems          Strong form of Conservation of Linear Momentum (equation of motion)          Conservation of angular momentum          Conservation of energy (1st law of thermodynamics)                    Weak form for 3D equations of motion      Piecewise Finite Element Approximation – Assembly Equations                  Partition to unrestrained and restrained degrees of freedom          Accounting for the effect of viscous damping forces                    Solution for General, Time-dependent solid mechanics problems                  Newmark Method for Step-by-step solution of equations of motion          Explicit Central Difference Method for equations of motion          Example 3.1: Explicit Central Difference Update          Example 3.2: Use of Explicit Analysis for Static Loading                      Elastoplasticity and Numerical Implementation          Introduction – Basic Definitions      The yield condition for multiaxial elastoplasticity – Yield criteria      The flow rule for elastoplasticity – Plastic Potential Function – Associative and Non-Associative flow rules                  Example 4.1: Isochoric Plastic flow for von Mises criterion          Example 4.2: Effective plastic strain and plastic multiplier          Example 4.3: Plastic flow for uniaxial stress                    Perfect Plasticity and Hardening      The consistency condition – Elastoplastic Material Tangent Stiffness Matrix                  Example 4.4: Calculations for non-associative flow rule in elastoplastic material                    Numerical Stress Update procedure                  The Radial Return Algorithm for J2 plasticity          Generalized Cutting Plane Algorithm          Algorithmic Tangent Moduli          Example 4.5: Calculations for von Mises model with mixed linear hardening.                      Large Deformation Solid Mechanics          Introduction – Reference/Current Configuration – The Motion Mapping      Material and Spatial Descriptions – The material time derivative                  Example 5.1: Description using material and spatial coordinates                    The deformation gradient of the motion and the polar decomposition theorem      Deformation Measures in the Current and in the Reference Configuration                  Example 5.2: Large deformation kinematics                    Stress Measures in the Current and in the Reference Configuration      The Need for Objective Stress Rates      Governing Equations with Respect to Reference Configuration – Total Lagrangian Formulation      Governing Equations with Respect to CURRENT Configuration      A “trick” to use the current configuration without convective terms: The updated Lagrangian formulation.      Weak form for total Lagrangian formulation: Principle of Virtual Work      Weak form for Updated Lagrangian formulation: Principle of Virtual Power        Finite Element Solution For Large-Deformation Problems          Introduction      Finite Element Equations for Total Lagrangian Formulation      Finite Element Equations for Updated Lagrangian Formulation      Concluding Remarks on Updated Lagrangian formulation        Further Iterative Solution Strategies          Introduction      Alternative Convergence Criteria for Iterative Solutions      Alternative Iterative Strategies – Quasi-Newton Methods                  Quasi-Newton method using rank-1 update – The Broyden method          Quasi-Newton method using rank-2 update – The BFGS method                    Increasing the efficiency and robustness of iterative procedures                  Subincrementation          Using Line-search in iterative procedures          Further Note: efficient use of Newton-Raphson iteration                      Vector-Tensor Calculus          Introduction – Scalar and Tensor quantities - Vectors      Definition of Stress tensor – Second-order tensors      Coordinate Transformation Rules for Vectors      Summation Convention                  Example 8.1: Summation Convention                    Coordinate transformation law for 2nd order tensors      Tensor Invariants      Volumetric and deviatoric parts of stress and strain      Principal Values and Principal Directions of a Tensor      The principal stress-space representation      -plane and Haigh-Westergaard coordinates      Derivatives of Invariants, deviatoric invariants and Haigh-Westergaard coordinates with stress components                  Example 8.2: Calculations with three-dimensional tensors                    Principal Values and Principal Directions of a Tensor        Standalone Program for Nonlinear Analysis          Program Description      Program Source Code      Sample Input File      Hope this information may be useful… Note - If any example is not working or any links are not working, please comment I will update with appropriate ones… Last Updated: 2020-03-10 ","categories": ["Research","Nonlinear Finite Element Analysis"],
        "tags": ["Introduction","nlfea"],
        "url": "https://vijaypolimeru.github.io/research/nonlinear%20finite%20element%20analysis/2020/03/15/nlfea-intro-outline.html"
      },{
        "title": "Dictionary - Tcl Master Series",
        "excerpt":"This post in the Tcl Master Series is dedicated to discuss various operations on Dictionaries in Tcl. A Dictionary is an collection of key-value pairs. A value can be an integer or double or array or a list or it can be another dictionary and key issimply a name or id which we assign for each value. Creating a dict       Method 1     set dictname [dict create key1 value1 key2 value2 ....]      set algorithms [dict create algo1 Newton algo2 KrylovNewton algo3 Broyden] puts $algorithms            Method 2     dict set dictname key value - for creating single key value pair. This is primariliy used for changing a value in a dictionary created using Method 1.      dict set algorithms algo1 Newton puts $algorithms      Getting a value in a dict Every value in a dictionary is paired with a key, which means without a key we cannot retrive a value from a dict. The syntax is, [dict get $dictname key] set algorithms [dict create algo1 Newton algo2 KrylovNewton]set algo [dict get $algorithms algo1];puts $algoGetting all keys and all values in a dict The syntax to get all keys in a dict is [dict keys $dictname]. This returns all the keys in the form of list. set algorithms [dict create algo1 Newton algo2 KrylovNewton]set allkeys [dict keys $algorithms];puts $allkeysin the same way we can get all values in a dict in the form of a list using [dict values $dictname] set algorithms [dict create algo1 Newton algo2 KrylovNewton]set allvalues [dict values $algorithms];puts $allvaluesIteration through a dict   Using for loopset algorithms [dict create algo1 Newton algo2 KrylovNewton algo3 Broyden algo4 BFGS algo5 etc.]set allkeys [dict keys $algorithms]for {set i 0} {$i &lt; [llength $allkeys]} {incr i 1} {    puts \"The Value of key [lindex $allkeys $i] is [dict get $algorithms [lindex $allkeys $i]]\"}  Using foreach loopset algorithms [dict create algo1 Newton algo2 KrylovNewton algo3 Broyden algo4 BFGS algo5 etc.]set allkeys [dict keys $algorithms]foreach key_id [dict keys $algorithms] {   puts \"The Value of key $key_id is [dict get $algorithms $key_id]\" }More details (if require) will be added soon… Hope this information may be useful… Note - If any example is not working or any links are not working, please comment I will update with appropriate ones… Last Updated: 2020-03-22 ","categories": ["Tcl","Tcl Master Series"],
        "tags": ["Tcl","Dict","Vijay Kumar Polimeru","Vijay Polimeru"],
        "url": "https://vijaypolimeru.github.io/dict-learn-tcl-programming-from-scratch/"
      },{
        "title": "Standard Tcl Library (Tcllib) - Installation - Tcl Master Series",
        "excerpt":"This post in the Tcl Master Series is dedicated to discuss various packages available in the Standard Tcl Library (Tcllib). The emphasis is particularly laid uponthe packages related to mathamatical operations. Download The latest version of standard Tcl library (Tcllib) can be downloaded from here. The examples pertaining to Tcllib presented hereafter are written using Tcllib 1.20, since it is the latest version when I am writing this post. which can bedownloaded from here The detailed documentation of Tcllib can be found here. Installation Following are the steps involved in the installation of Tcllib,   Unzip the tcllib-1.20.zip file (or the latest version)  Add the path C:\\Tcl\\bin (or the path of yourpath\\Tcl\\bin where ever you have installed Tcl) to the path variable. (Normally, when installing the Tcl this path automatically added to windows path variable, if not please add this now).  Type tclsh in the command prompt which is opened from the unzipped tcllib-1.20 folder. (just navigate to the folder tcllib-1.20, highlight the complete folder path in the top pane and type “cmd”).  Then type tclsh installer.tcl and wait for some time, till the installation is over.Example To check whether the installation is succesfull or not, download the Tcl file (download link) and run the stdlib-test.tclfile from Komodo IDE. If you can get an image something similar to the one shown as below, then the installation is successfull. Since the rand() is used to generate the data, you may not get an exact image like the one shown below, you will get something similar to this.  More details (if require) will be added soon… Hope this information may be useful… Note - If any example is not working or any links are not working, please comment I will update with appropriate ones… Last Updated: 2020-03-22 ","categories": ["Tcl","Tcl Master Series"],
        "tags": ["Tcl","Tcllib","Standard Tcl Library","Vijay Kumar Polimeru","Vijay Polimeru"],
        "url": "https://vijaypolimeru.github.io/tcllib-installation-learn-tcl-programming-from-scratch/"
      },{
        "title": "Standard Tcl Library (Tcllib) - Examples - Tcl Master Series",
        "excerpt":"This post in the Tcl Master Series is dedicated to discuss various packages available in the Standard Tcl Library (Tcllib). The emphasis is particularly laid uponthe packages related to mathamatical operations. The detailed documentation of Tcllib can be found here namespaces and packages Before going to discuss about the usage of various libraries in tcllib, it is very essential to know about a concept called namespace. In a computer program, the names of all program elements (such as variables, function names, memory addresses etc.) must be unique. A namespace is an container created to hold the names of all program elements. The elements in a namespace are accessed using :: called scope resolution operator. Examples are as follows   If add is a function residing in math namespace, then add can be accessed as ::math::add  If mean is a function residing in statistics namespace which is nested in math namespace, then mean can be accessed as ::math::statistics::meanPackages are reusable units of code, in general these are also called as libraries. Usually, every package comes with its own namespace or sometimes have multiple namespaces. Tcllib  has plethora of packages available for every purpose. To use a function from a package, we must first add it to our program usingthe command package require packagename version_number (version_number is optional). Lets discuss some examples to understand using Tcllib Vectors and Matrices Various operations on vectors and matrices are explained through the following examples. Example 1 - Creating vectors and matrices Tcllib provides mkVector ndim value and mkMatrix nrows ncols value to create vectors and matrices. In matrix each row is arranged as a list.However, these matrices or vectors are initialised with a value, which have to be modified later. package require math::linearalgebranamespace eval mm namespace import ::math::linearalgebra::*set mat1 [mm::mkMatrix 2 3 0]; # a 2X3 matrix, with elements as zerosset mat2 [mm::mkMatrix 4 4 1]; # a 4X4 Square matrix, with elements as onesset vec1 [mm::mkVector 5 0]; puts $mat1puts $mat2puts $vec1Example 2 - Getting size (number of rows and columns) To iterate through various indices of a matrix, it is essential to know the number of rows and columns upfront. tcllib does not have special functions forthis purpose. However, since each row of a matrix is a list and number of elements in each rowis equal to the number of columns, we can use functions of lists (such as llength and lindex) for this purpose, package require math::linearalgebranamespace eval mm namespace import ::math::linearalgebra::*set mat1 [mm::mkMatrix 2 3 0]; # a 2X3 matrix, with elements as zerosputs \"no. of rows in mat1 = [llength $mat1]\"puts \"no. of columns in mat1 = [expr {[llength [lindex $mat1 0]]}]\"Example 3 - Getting and Setting elements in a matrix To set and get elements in a matrix, Tcllib provides, two special functions getelem matrix row col and setelem matrix row ?col? newvalue. newvalue can be a number or string.However, matrix operations such as inverse, determinant, addition, substraction, etc can be performed only on numbers package require math::linearalgebranamespace eval mm namespace import ::math::linearalgebra::*set mat1 [mm::mkMatrix 2 3 0]; # a 2X3 matrix, with elements as zerosputs $mat1for { set i 0 }  { $i &lt; [llength $mat1] }  { incr i } {    for { set j 0 }  { $j &lt; [expr {[llength [lindex $mat1 0]]}] }  { incr j } {        mm::setelem mat1 $i $j [expr rand()]    }}puts $mat1puts [mm::getelem $mat1 1 1]Example 4 - Addition, Substraction, Multiplication, Determinant and Inverse Addition, Substraction, Multiplication and Determinant have straight forward procs for evaluation in tcllib. However, there areseveral functions (such as Gauss, PGauss, Triangular etc.) for evaluating inverse package require math::linearalgebranamespace eval mm namespace import ::math::linearalgebra::*set mat1 [mm::mkMatrix 5 5 0]; # a 4X4 matrix, with elements as zerosset mat2 [mm::mkMatrix 5 5 0]; # a 4X4 matrix, with elements as zerosfor { set i 0 }  { $i &lt; [llength $mat1] }  { incr i } {    for { set j 0 }  { $j &lt; [expr {[llength [lindex $mat1 0]]}] }  { incr j } {        mm::setelem mat1 $i $j [expr rand()]        mm::setelem mat2 $i $j [expr rand()]    }}puts $mat1puts $mat2# Addition, Substraction, Multiplication and Determinantset sum_mats [mm::add_mat $mat1 $mat2]set diff_mats [mm::sub_mat $mat1 $mat2]set Multip_mats [mm::matmul $mat1 $mat2]set det_mat2 [mm::det $mat2]# Inverseset matID [mm::mkIdentity [llength $mat2]]set mat2_inv [mm::solvePGauss  $mat2 $matID]puts \"Check Inverse = [mm::matmul $mat2_inv $mat2]\"More examples will be added soon… Hope this information may be useful… Note - If any example is not working or any links are not working, please comment I will update with appropriate ones… Last Updated: 2020-03-24 ","categories": ["Tcl","Tcl Master Series"],
        "tags": ["Tcl","Tcllib","Standard Tcl Library","Vijay Kumar Polimeru","Vijay Polimeru"],
        "url": "https://vijaypolimeru.github.io/tcllib-examples-learn-tcl-programming-from-scratch/"
      },{
        "title": "Exception Handling - Tcl Master Series",
        "excerpt":"This post in the Tcl Master Series is dedicated to discuss various Exception Handling operations. In this post we will understand tackling a very specific set of exceptions called errors using error and catch commands. The error message and error location are two important features essential for users to resolve the error.       Error Message - gives description about the error, for example when I execute puts \"print this, Komodo, throws an error message as follows      missing \"     while executing \"puts \"print this        it gives us an idea about what is wrong with the code, in this case it shound be puts \"print this\"         Error Location - The complete stack trace with line numbers, i.e. all the nested functions starting from the from the file which we executed. In the aboveexample the stack trace will (file \"error-file-1.tcl\" line 1). Since it has only one line of code.   A more detailed example is as follows, proc fun3 {a b} {    return [fun2 $a $b]}proc fun2 {a b} {    return [fun1 $a $b]}proc fun1 {a b} {   return [expr tan($a/$b)]}puts \"Result = [fun1 10 0]\"In this case the error message will be divide by zero and the stack trace will be     while executing\"expr tan($a/$b)\"    (procedure \"fun1\" line 2)    invoked from within\"fun1 10 0\"    invoked from within\"puts \"Result = [fun1 10 0]\"\"    (file \"error-file-1.tcl\" line 13)Tcl will take care of all the error handling mechanism, however, if the developer wants to show a custom error messages for some specific type of calculations, in that case this can be done using the error and catch commands, in their simplest form, these commands can be implemented as follows   error errorMsg  catch {command} variableFor example, the above code can be re-written as follows proc fun3 {a b} {    return [fun2 $a $b]}proc fun2 {a b} {    return [fun1 $a $b]}proc fun1 {a b} {   if {$b == 0} {      error \"Division not possible, because b = $b\"   } else {      return [expr tan($a/$b)]   }}catch {puts \"Result = [fun3 24 2]\"} errormessageputs $errormessage  If we execute this using [fun3 24 2], it outouts Result = -0.6358599286615808      Else if we execute this using [fun3 24 0] it outputs error message Division not possible, because b = 0 but does not provide stack trace, to get stack tracewe have to explicitly ask errorInfo using puts as follows      proc fun3 {a b} {     return [fun2 $a $b] } proc fun2 {a b} {     return [fun1 $a $b] } proc fun1 {a b} {    if {$b == 0} {       error \"Division not possible, because b = $b\"    } else {       return [expr tan($a/$b)]    } } if {[catch {puts \"Result = [fun3 24 0]\"} errormessage]} {    puts $errormessage    puts $errorInfo }        if we execute this we get      Division not possible, because b = 0 stack trace is ....     (procedure \"fun1\" line 1)     invoked from within \"fun1 $a $b\"     (procedure \"fun2\" line 2)     invoked from within \"fun2 $a $b\"     (procedure \"fun3\" line 2)     invoked from within \"fun3 24 0\"      Note - Sometimes both Komodo IDE and tclsh.exe will provide stack trace in different formats, I suggest to use both to get to appropriate error location. More details (if require) will be added soon… Hope this information may be useful… Note - If any example is not working or any links are not working, please comment I will update with appropriate ones… Last Updated: 2020-03-22 ","categories": ["Tcl","Tcl Master Series"],
        "tags": ["Tcl","Errors","Exceptions","Error Handling","Try and Catch","Standard Tcl Library","Vijay Kumar Polimeru","Vijay Polimeru"],
        "url": "https://vijaypolimeru.github.io/exception-handling-learn-tcl-programming-from-scratch/"
      },{
        "title": "File Management - Tcl Master Series",
        "excerpt":"This post in the Tcl Master Series is dedicated to discuss various File Management operations. Basic file management operations such as open file, read data from file, write data to file, etc, can be performed as follows Open File The syntax to open file is set file_id [open file_name access_type]. In which [open file_name access_type] opens the file with given access_type and returns a unique file identifier into file_id which can be used for further operationssuch as read, write, append data etc.             Access Type      Description                  r      This opens and reads an existing file (file must exist). This is the default mode when no access type is specified              w      This opens an existing file for writing, it will also delete the data in the existing file , if the file does not exist then a new file is created with the given file_name              a      This opens an existing file for writing (file must exist), and appends the new data to the existing data              r+      This opens an existing file (file must exist) for both reading and writing purposes, it appends the new data to the existing data              w+      This opens an existing file for both reading writing, it will also delete the data in the existing file , if the file does not exist then a new file is created with the given file_name              a+      It is similar to access type r+, the only difference is, if the file does not exist then a new file is created with the given file_name      Read From File The syntax to read file as set file_data [read $file_id].This command reads and stores the data into a string type variable file_data. Write to File Writing data into a file is done using puts command as puts $file_name \"text to write\" or puts $filename $data_to_store Close File The syntax to close a file is close $file_id Examples       Generate and store data in a file called data.out      for {set i 0} {$i &lt; 10} {incr i} {     lappend data [expr rand()] } puts $data set fid [open \"data.out\" w] puts $fid $data close $fid        on each run, new data will be stored in data.out file.         Read the data.out file and store it into a variable file_data      set fid [open \"data.out\"] set file_data [read $fid] puts $file_data close $fid        file_data is a string type variable         Write new data to data.out in addition to exisiting data      set fid [open \"data.out\" r+] set file_data [read $fid] puts $file_data for {set i 0} {$i &lt; 10} {incr i} {     lappend data [expr rand()] } puts $fid $data close $fid        if we replace r+ with w+, then everytime the new data is added to the file after deleting the old data   Though, these are some basic file management operations, we never use them in this simplest form. We mainly operate on vectors, matrices, lists etc, performingfile management operations on these type of variables is not that straight forward. Example codes for performing file management onthese data types has been added here, please do check them and give your feedback More details (if require) will be added soon… Hope this information may be useful… Note - If any example is not working or any links are not working, please comment I will update with appropriate ones… Last Updated: 2020-03-22 ","categories": ["Tcl","Tcl Master Series"],
        "tags": ["Tcl","file","file management","file (I/O)","Vijay Kumar Polimeru","Vijay Polimeru"],
        "url": "https://vijaypolimeru.github.io/file-management-learn-tcl-programming-from-scratch/"
      },{
        "title": "Chocolate Chip Cookies",
        "excerpt":"A chocolate chip cookie is a drop cookie that originated in the United States and features chocolate chips as its distinguishing ingredient. The traditional recipe combines a dough composed of butter and both brown and white sugar with semi-sweet chocolate chips. Variations include recipes with other types of chocolate as well as additional ingredients such as nuts or oatmeal. This recipe makes 4 dozen cookies. Ingredients   2 1/4 cups all-purpose flour  1 teaspoon baking soda  1/2 teaspoon salt  1 cup butter, softened and cut to pieces  1 cup sugar  1 cup light brown sugar, packed  2 teaspoons vanilla extract  2 large eggs  2 cups semi-sweet chocolate chips  1/2 teaspoon nutmeg (optional)  1 cup chopped pecans or walnuts (optional)Directions   Preheat the oven to 350 F.  In a medium bowl, whisk flour with baking soda, nutmeg and salt.  In a large bowl, beat butter with sugar and brown sugar until creamy and light. Add vanilla and eggs, one at a time, and mix until incorporated.  Gradually add dry mixture into the butter-sugar wet blend, mixing with a spatula until combined. Add chocolate chips and nuts until just mixed.  Drop tablespoon-sized clumps onto un-greased cookie sheets. Bake for 8-12 minutes, or until pale brown. Allow to cool on the pan for a minute or three, then transfer cookies to a wire rack to finish cooling.","categories": [],
        "tags": [],
        "url": "https://vijaypolimeru.github.io/recipes/chocolate-chip-cookies/"
      },{
        "title": "Oatmeal Cookies",
        "excerpt":"Oatmeal cookies are a proverbial favorite with both kids and adults. This crisp and chewy cookie is loaded with oats, dried fruit, and chopped nuts. Ingredients   1 cup butter, softened 1 cup white sugar  1 cup packed brown sugar  2 eggs  1 teaspoon vanilla extract  2 cups all-purpose flour  1 teaspoon baking soda  1 teaspoon salt  1 1/2 teaspoons ground cinnamon  3 cups quick cooking oatsDirections   In a medium bowl, cream together butter, white sugar, and brown sugar. Beat in eggs one at a time, then stir in vanilla. Combine flour, baking soda, salt, and cinnamon; stir into the creamed mixture. Mix in oats. Cover, and chill dough for at least one hour.  Preheat the oven to 375 degrees F (190 degrees C). Grease cookie sheets. Roll the dough into walnut sized balls, and place 2 inches apart on cookie sheets. Flatten each cookie with a large fork dipped in sugar.  Bake for 8 to 10 minutes in preheated oven. Allow cookies to cool on baking sheet for 5 minutes before transferring to a wire rack to cool completely.","categories": [],
        "tags": [],
        "url": "https://vijaypolimeru.github.io/recipes/oatmeal-cookies/"
      },{
        "title": "Peanut Butter Cookies",
        "excerpt":"A peanut butter cookie is a type of cookie that is distinguished for having peanut butter as a principal ingredient. The cookie generally originated in the United States, its development dating back to the 1910s. Ingredients   1 cup unsalted butter  1 cup crunchy peanut butter  1 cup white sugar  1 cup packed brown sugar  2 eggs 2  1/2 cups all-purpose flour  1 teaspoon baking powder  1/2 teaspoon salt  1 1/2 teaspoons baking sodaDirections   Cream butter, peanut butter, and sugars together in a bowl; beat in eggs.  In a separate bowl, sift flour, baking powder, baking soda, and salt; stir into butter mixture. Put dough in refrigerator for 1 hour.  Roll dough into 1 inch balls and put on baking sheets. Flatten each ball with a fork, making a crisscross pattern. Bake in a preheated 375 degrees F oven for about 10 minutes or until cookies begin to brown.","categories": [],
        "tags": [],
        "url": "https://vijaypolimeru.github.io/recipes/peanut-butter-cookies/"
      }]
